//

if (response.ok){
      console.log(data.allmovies)
      const updatedMovies=data.allmovies.map(eachMovie=>({
        movieId:eachMovie.movie_id,
        imageUrl:eachMovie.image_url,
        videoUrl:eachMovie.video_url,
        language:eachMovie.language,
        genre:eachMovie.genre,
        category:eachMovie.category,
        year:eachMovie.year,
        isLiked:eachMovie.liked!==0 ?  true:false,
        totalLikes:eachMovie.total_likes,
        imdbRating:eachMovie.imdb_rating,
        description:eachMovie.description,
        name:eachMovie.name,
      }))



{
       isOpen &&  <div className="lg:hidden flex flex-col justify-start mr-auto p-5 w-full bg-gray-800">
       <div className='w-80 mx-auto my-2 '>
        {isSearch ? <Link to="/search" className="relative flex items-center w-full h-11 rounded-lg focus-within:shadow-lg bg-white overflow-hidden">
          <div className="grid place-items-center h-full w-12 text-gray-300">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
          </div>
          <input onChange={handleSearchChange}
            className="peer h-full w-full outline-none text-sm text-gray-700 pr-2"
            type="text"
            id="search"
            placeholder="Search something.." />
        </Link>: <div className="relative flex items-center w-full h-11 rounded-lg focus-within:shadow-lg bg-white overflow-hidden">
          <div className="grid place-items-center h-full w-12 text-gray-300">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
          </div>
          <input onChange={handleSearchChange}
            className="peer h-full w-full outline-none text-sm text-gray-700 pr-2"
            type="text"
            id="search"
            placeholder="Search something.." />
        </div>}
      </div>
       <Link to="/" className="text-lg font-mono hover:text-sky-500 text-white ">Home</Link>
       <Link to="/popular" className="text-lg font-mono hover:text-sky-400 text-white ">Popular</Link>
       <Link to="/profile" className="text-lg font-mono text-white hover:text-sky-500 ">Profile</Link>
     </div>
      }

      const debounce = (func, delay) => {
  let timeoutId;
  console.log(timeoutId)
  return (...args) => {
    clearTimeout(timeoutId);
    timeoutId = setTimeout(() => {
      func(...args);
    }, delay);
  };
};


const onWheelSlider=debounce((e,ref)=>{
  if (!ref.current) return
  if (e.deltaX >0){
    ref.current.slickNext();

  }else if (e.deltaX<0){
    ref.current.slickPrev();
  }
},20)


    <button type="button" className='' onClick={() => this.isLikedMovie()}>
                {!this.state.like ?<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-8 h-8 text-white text-right">
  <path strokeLinecap="round" strokeLinejoin="round" d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z" />
</svg>: <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-8 h-8 text-rose-500 transition duration-300 delay-75">
  <path d="m11.645 20.91-.007-.003-.022-.012a15.247 15.247 0 0 1-.383-.218 25.18 25.18 0 0 1-4.244-3.17C4.688 15.36 2.25 12.174 2.25 8.25 2.25 5.322 4.714 3 7.688 3A5.5 5.5 0 0 1 12 5.052 5.5 5.5 0 0 1 16.313 3c2.973 0 5.437 2.322 5.437 5.25 0 3.925-2.438 7.111-4.739 9.256a25.175 25.175 0 0 1-4.244 3.17 15.247 15.247 0 0 1-.383.219l-.022.012-.007.004-.003.001a.752.752 0 0 1-.704 0l-.003-.001Z" />
</svg> 

}</button>


        <div className='' style={{ 
   backgroundImage: `linear-gradient(rgba(15, 23, 42, 0.90), rgba(15, 23, 42, 1)), url(${posterUrl})`, 
  position:"absolute",
  height: '100vh', 
  minWidth: '100%',
  backgroundSize: 'cover',
  opacity:'50px',
}}>
  <Header/>
  <div className='absolute mt-28 mx-10 flex flex-row '>
  <div className='relative '>
  <Shadow input={<img
    src={imageUrl}
    alt={name}
    style={{ height: '500px', width: '350px' }}
    className=' relative rounded-xl bg-cover'
  />}/>
  <div className="absolute bottom-0 right-0 flex justify-end">
    <CircilarRating rating={imdbRating} />
  </div>
</div>


    <div className='ml-24 w-2/3 divide-y-2'>
      <h1 className="text-8xl font-MontserBarlowCondensed font-medium text-white">{name}</h1>
      <div className='flex flex-row divide-x-4 gap-10 py-4 mb-4'>
      <div className='-mr-5  pb-4'>
        <h1 className='text-white stroke-2 stroke-gray-400 text-2xl font-sans py-3'>Runtime</h1>
       <Runtime hours={hours} minutes={minutes}/>
      </div>
      <div className='pl-5 pb-4'>
      <h1 className='text-white stroke-2 stroke-gray-400 text-2xl font-sans py-3'>Release Date</h1>
      <ReleaseDate input={releaseDate}/>

      </div> 
      </div>
      <div>
      <h1 className='text-white stroke-2 stroke-gray-400 text-2xl font-sans py-3' >Storyline</h1>
        <p className='text-white stroke-2 stroke-gray-400 text-2xl font-sans py-3'>{description}</p>
      </div>
    </div>

  </div>
</div>












// Insert movie record and get the last inserted ID
        const movieSql = "INSERT INTO movie(name, image_url, video_url, poster_url, runtime, release_date, description, imdb_rating, category, certificate) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
const movieValues = [name, movieImage.path, movieTrailer.path, PosterUrl.path, runtime, releaseDate, description, imdbRating, category, certificate];
        const movieResult = await db.query(movieSql, movieValues);

        const [movieIDResult,fields] = await db.query(`SELECT * FROM movie WHERE name = '${name}'`);
        const MovieId=movieIDResult[0].movie_id
        
    
        // Insert Directors
        await Promise.all(Directors.map((dir, index) => {
            if (DirectorImage[index]) {
              const dirSql = "INSERT INTO director (movie_id, director_name, director_img_url) VALUES (?, ?, ?)";
              const dirValues = [MovieId, dir.name, DirectorImage[index].path];
              return db.query(dirSql, dirValues);
            }
          }));
      
          // Insert Music Directors
          await Promise.all(MusicDirectors.map((musicDir, index) => {
            if (MusicDirectorImage[index]) {
              const musicDirSql = "INSERT INTO music_director (movie_id, music_dir_name, music_dir_img_url) VALUES (?, ?, ?)";
              const musicDirValues = [MovieId, musicDir.name, MusicDirectorImage[index].path];
              return db.query(musicDirSql, musicDirValues);
            }
          }));

           // Insert Stars
    await Promise.all(Stars.map((star, index) => {
        if (StarImage[index]) {
          const starSql = "INSERT INTO stars (movie_id, star_name, star_img_url) VALUES (?, ?, ?)";
          const starValues = [MovieId, star.name, StarImage[index].path];
          return db.query(starSql, starValues);
        }
      }));
  
      // Insert OTT Platforms
      await Promise.all(OTTPlatform.map((OTT, index) => {
        if (OTTplatformImage[index]) {
          const OTTSql = "INSERT INTO ott_platform (movie_id, ott_url, ott_img_url) VALUES (?, ?, ?)";
          const OTTValues = [MovieId, OTT.link, OTTplatformImage[index].path];
          return db.query(OTTSql, OTTValues);
        }
      }));

      // Insert Related Videos
    await Promise.all(RelatedVideo.map((RelVideo, index) => {
        if (Video[index] && Thumbnail[index]) {
          const relVideoSql = "INSERT INTO related_video (movie_id, video_name, video_url, video_url_img) VALUES (?, ?, ?, ?)";
          const relVideoValues = [MovieId, RelVideo.title, Video[index].path, Thumbnail[index].path];
          return db.query(relVideoSql, relVideoValues);
        }
      }));
  
      // Insert Writers
      await Promise.all(Writer.map((writer) => {
        const writerSql = "INSERT INTO writter (movie_id, writter_name) VALUES (?, ?)";
        const writerValues = [MovieId, writer.name];
        return db.query(writerSql, writerValues);
      }));

      await Promise.all(Genre.map((genre) => {
        const genreSql = "INSERT INTO genre (movie_id, type) VALUES (?, ?)";
        const genreValues = [MovieId, genre.type];
        return db.query(genreSql, genreValues);
      }));
  
      // Insert Languages
      await Promise.all(Language.map((lan) => {
        const lanSql = "INSERT INTO language (movie_id, language, category) VALUES (?, ?, ?)";
        const lanValues = [MovieId, lan.language, lan.category];
        return db.query(lanSql, lanValues);
      }));













































      const express = require("express");
const cors = require('cors');
const multer = require('multer');
const bodyParser = require('body-parser');
const dotenv = require('dotenv').config();
const cloudinary = require('cloudinary').v2;
const { CloudinaryStorage } = require('multer-storage-cloudinary');
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const db = require("./db");

const app = express();

// Middleware
app.use(cors());
app.use(express.json());
app.use(bodyParser.json());

// Cloudinary configuration
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_API_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
  secure: true,
});

// Multer configuration
const storage = new CloudinaryStorage({
  cloudinary,
  params: {
    folder: 'MovieClip/uploads',
    resource_type: 'auto',
    allowed_formats: ['jpg', 'jpeg', 'png', 'bmp', 'svg', 'webp', 'heic', 'tiff', 'mp4', 'mkv', 'avi', 'mov', 'wmv', 'flv', 'm4v', 'webm', 'ogg', 'ogv', '3gp', '3g2', 'mpeg', 'mpg', 'mpe', 'm2v', 'm4v', 'mxf'],
  },
  
});

cloudinary.api.ping()
  .then(result => {
    console.log('Cloudinary is working:', result);
  })
  .catch(error => {
    console.error('Error connecting to Cloudinary:', error);
    res.send("")
  });

const upload = multer({ storage });



app.use((req, res, next) => {
    res.setHeader('Permissions-Policy', 'ch-ua-form-factor=(none)');
    next();
  });


db.query("SELECT 1")
    .then(data=>{
        console.log("db  connection succeeded")
        console.log(process.env.PORT)
        app.listen(process.env.PORT,()=>{console.log("Server is Running in localhost:5001")}
        )
    })
    .catch(err=> console.log(`db Connection Failed .\n` +err))


//Users
const UserAuthorization =(req,res,next)=>{
    let jwtToken;
    const autHeader = req.headers["authorization"]
    console.log(autHeader)
    
    if (autHeader!==undefined){
        jwtToken=autHeader.split(" ")[1]
    }
    else{
        res.status(401).send({errMsg:"Invalid Jwt Token"})
    }
    if(jwtToken !== undefined){
        jwt.verify(jwtToken,"MY_SECRET_TOKEN",async(err,payload)=>{
            if (err) {
                res.status(401);
                res.send("Invalid JWT Token");
              } else {
                req.username = payload.username;
                console.log(req.username)
                next();}
        })
    }
}

app.post("/register/", async (req, res) => {
    const { username, password } = req.body;
    const getQuery = `SELECT * FROM user WHERE username='${username}'`;
        // Execute query to get user from database
        
        
    try{
        const [result,fields] = await db.query(getQuery)
        console.log(result)
        // Check if user already exists
        if (result.length>0) {
            res.status(400).send({errMsg:"User Already exist"});
        } else {
            // Check password length
            if (password.length < 6) {
                res.status(400).send({errMsg:"Password is too short"});
            } else {
                // Hash the password
                const hashedPassword = await bcrypt.hash(password, 15);
                // Insert user into database
                const registerQuery = `INSERT INTO user(username,password) values('${username}','${hashedPassword}')`;
                await db.query(registerQuery);
                res.status(200).send({success:"User registered successfully"});
            }
        
        }
    }catch(err){
        res.status(500).send({errMsg:`Server Error : ${err}`})
    }
}

)

app.post("/login/",async(req,res)=>{
    const { username, password } = req.body;

      const getQuery = `SELECT * FROM user WHERE username='${username}'`;
        // Execute query to get user from database
        
        
    try{
        const [result,fields] = await db.query(getQuery)
     


        if (result.length===0) {
            res.status(400);
            res.send({errMsg:"Invalid User"});
        } else {
            // Check password 
              const checkPassword= await bcrypt.compare(password,result[0].password)
              if (checkPassword===true){

                const payload={username:username}
                const jwtToken=jwt.sign(payload,"MY_SECRET_TOKEN")
                res.send({jwtToken})

              }else{
                res.status(400).send({errMsg:"Invalid Username and Password"});
              }

            }
        
        }
    catch(err){
        res.status(500).send({errMsg:`Server Error : ${err}`})
    }

})

app.get("/",UserAuthorization,async(req,res)=>{
    const {username}=req
    
  try{
    const [result,fields] = await db.query( `SELECT user_id FROM user WHERE username='${username}'`);
    const userid=result[0].user_id
    const [allmovieresult,allMovieFiels]=await db.query(`SELECT m.*,
    COUNT(l.like_id) AS total_likes,
    CASE WHEN liked_movies.movie_id IS NOT NULL THEN TRUE ELSE FALSE END AS liked
FROM movie m
LEFT JOIN likes l ON m.movie_id = l.movie_id
LEFT JOIN (
 SELECT DISTINCT movie_id
 FROM likes
 WHERE user_id = '${userid}'
) AS liked_movies ON m.movie_id = liked_movies.movie_id
GROUP BY m.movie_id;`)
    const [popularMoviereuslt,popularMovieFields]=await db.query(`
    SELECT m.*,
       COUNT(l.like_id) AS total_likes,
       CASE WHEN liked_movies.movie_id IS NOT NULL THEN TRUE ELSE FALSE END AS liked
FROM movie m
LEFT JOIN likes l ON m.movie_id = l.movie_id
LEFT JOIN (
    SELECT DISTINCT movie_id
    FROM likes
    WHERE user_id = '${userid}'
) AS liked_movies ON m.movie_id = liked_movies.movie_id
WHERE m.imdb_rating >= 8.0
GROUP BY m.movie_id;

    `)
    
    res.send({allmovies:allmovieresult,popularMovie:popularMoviereuslt})
  }
    catch(err){
        res.status(500).send({errMsg:`Server Error : ${err}`})
    }
})

app.get("/movies/:id", UserAuthorization, async (req, res) => {
    const { id } = req.params;
    const { username } = req;

    try {
        const [userResult, userFields] = await db.query(
            `SELECT user_id FROM user WHERE username = ?`, [username]
        );
        const userid = userResult[0].user_id;

        const [movieResult, movieFields] = await db.query(`
        SELECT m.*,
        COUNT(l.like_id) AS total_likes,
        CASE WHEN l.movie_id IS NOT NULL THEN TRUE ELSE FALSE END AS liked,
        CASE WHEN w.movie_id IS NOT NULL THEN TRUE ELSE FALSE END AS in_watchlist
 FROM movie m
 LEFT JOIN likes l ON m.movie_id = l.movie_id AND l.user_id = ?
 LEFT JOIN watch_list w ON m.movie_id = w.movie_id AND w.user_id = ?
 WHERE m.movie_id = ?
 GROUP BY m.movie_id;
        `, [userid,userid, id]);

        const [genre, genrefield] = await db.query(
            `SELECT type FROM genre WHERE movie_id = ?;`, [id]
        );

        const [stars, starsfield] = await db.query(
            `SELECT star_name , star_img_url FROM stars WHERE movie_id = ?`, [id]
        );

        const [director, directorfield] = await db.query(
            `SELECT director_name , director_img_url FROM director WHERE movie_id = ?`, [id]
        );

        const [writer, writterfield] = await db.query(
            `SELECT writter_name FROM writter WHERE movie_id = ?`, [id]
        );

        const [musicdirector, musicdirectorFields] = await db.query(
            `SELECT music_dir_name, music_dir_img_url FROM music_director WHERE movie_id = ?`, [id]
        );

        const [language, languageField] = await db.query(
            `SELECT language, category FROM language WHERE movie_id = ?`, [id]
        );

        const [relatedVideos, relatedVideosFields] = await db.query(
            `SELECT video_name, video_url,video_url_img FROM related_video WHERE movie_id = ?`, [id]
        );

        const [ott, ottFields] = await db.query(
            `SELECT ott_img_url, ott_url FROM ott_platform WHERE movie_id = ?`, [id]
        );

        res.send({
            movieResult: movieResult,
            genre: genre,
            stars: stars,
            director: director,
            writer: writer,
            musicdirector: musicdirector,
            ott: ott,
            relatedVideos: relatedVideos,
            language: language
        });
    } catch (err) {
        res.status(500).send({ errMsg: `Server Error : ${err}` });
    }
});

app.post('/movies/:movieId/likes', UserAuthorization, async (req, res) => {
    const { movieId } = req.params;
    const {username}=req
    try {
        const [result,fields] = await db.query( `SELECT user_id FROM user WHERE username='${username}'`);
        const userid=result[0].user_id
      const existingLike = await db.query(`SELECT * FROM likes WHERE movie_id = ${movieId} AND user_id = ${userid}`);
      
      if (existingLike[0].length > 0) {
       
        await db.query(`DELETE FROM likes WHERE movie_id =  ${movieId} AND user_id =  ${userid}`);
        res.status(200).send({  liked: false });
      } else {
        
        await db.query(`INSERT INTO likes (movie_id, user_id) VALUES (  ${movieId}, ${userid} )`);
        res.status(200).send({ liked: true });
        console.log("true")
      }
    } catch (error) {
      console.error('Error handling like:', error);
      res.status(500).send({ error: 'Server error' });
    }
});

  app.post('/movies/:movieId/watchList', UserAuthorization, async (req, res) => {
    const { movieId } = req.params;
    const {username}=req
    try {
        const [result,fields] = await db.query( `SELECT user_id FROM user WHERE username='${username}'`);
        const userid=result[0].user_id
      const existingLike = await db.query(`SELECT * FROM watch_list WHERE movie_id = ${movieId} AND user_id = ${userid}`);
      
      if (existingLike[0].length > 0) {
       
        await db.query(`DELETE FROM watch_list WHERE movie_id =  ${movieId} AND user_id =  ${userid}`);
        res.status(200).send({  watchList: false });
      } else {
        
        await db.query(`INSERT INTO watch_list (movie_id, user_id) VALUES (  ${movieId}, ${userid} )`);
        res.status(200).send({ watchList: true });
        console.log("true")
      }
    } catch (error) {
      console.error('Error handling watchList:', error);
      res.status(500).send({ error: 'Server error' });
    }
});

  app.get('/search', UserAuthorization, async (req, res) => {
    

    const { search_q = "" } = req.query;

    const { username } = req;
    

    try {
        // Get the user ID based on the username
        const [userResult,fields] = await db.query(`SELECT user_id FROM user WHERE username = ?`, [username]);
        const userId = userResult[0].user_id;
        

        // Search movies based on the user input
        const [searchResult,SearchFIeld] = await db.query(`
        
        SELECT 
    m.*,
    COUNT(l.like_id) AS total_likes,
    CASE WHEN liked_movies.movie_id IS NOT NULL THEN TRUE ELSE FALSE END AS liked
FROM 
    movie m
LEFT JOIN 
    likes l ON m.movie_id = l.movie_id
LEFT JOIN (
    SELECT DISTINCT movie_id
    FROM likes
    WHERE user_id = '${userId}'
) AS liked_movies ON m.movie_id = liked_movies.movie_id
WHERE 
    m.name LIKE '%${search_q}%'
GROUP BY 
    m.movie_id;`


);

console.log(searchResult)
        res.send({searchResult})
        // Send the search result back to the client
       
    } catch (error) {
        console.error('Error handling like:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

app.get('/user', UserAuthorization, async (req, res) => {

    const { username } = req;

    try {
    
        const [userResult,fields] = await db.query(`SELECT * FROM user WHERE username = '${username}'`);
        const userId=userResult[0].user_id
        const [likedMovies, likedMoviesFields] = await db.query(`
    SELECT 
        movie.name,
        movie.movie_id,
        movie.image_url
    FROM 
        movie
    LEFT JOIN 
        likes ON movie.movie_id = likes.movie_id
    WHERE 
        likes.user_id = ?;
`, [userId]);

const [WatchList, WatchListFields] = await db.query(`
    SELECT 
        movie.name,
        movie.movie_id,
        movie.image_url
    FROM 
        movie
    LEFT JOIN 
        watch_list ON movie.movie_id = watch_list.movie_id
    WHERE 
        watch_list.user_id = ?;
`, [userId]);

        
        res.send({userDetails:userResult,likedMovies,WatchList})
    } catch (error) {
        console.error('Error handling like:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

//Admin
const Authorization =(req,res,next)=>{
    let jwtToken;
    const autHeader = req.headers["authorization"]
    
    if (autHeader!==undefined){
        jwtToken=autHeader.split(" ")[1]

    }
    else{
        res.status(401).send({errMsg:"Invalid Jwt Token"})
    }
    if(jwtToken !== undefined){
        jwt.verify(jwtToken,"MY_SECRET_ADMIN_TOKEN",async(err,payload)=>{
            if (err) {
                res.status(401);
                res.send("Invalid JWT Token");
              } else {
                req.admin = payload.adminname;
                console.log(req.admin)
                next();}
        })
    }
}

app.post("/admin-register/", Authorization, async (req, res) => {
    const { adminname, password } = req.body;
    const { admin } = req;
    const getQuery = `SELECT * FROM admin WHERE admin_name='${adminname}'`;

    try {
        const [result, fields] = await db.query(getQuery);
        console.log('Query result:', result);

        // Check if user already exists
        if (result.length > 0) {
            console.log("User already exists");
            res.status(400).json({ errMsg: "User already exists" });
        } else {
            // Check password length
            if (password.length < 6) {
                res.status(400).json({ errMsg: "Password is too short" });
            } else {
                // Hash the password
                const hashedPassword = await bcrypt.hash(password, 15);
                // Insert user into database
                const registerQuery = `INSERT INTO admin(admin_name, admin_password, referral_admin) values('${adminname}', '${hashedPassword}', '${admin}')`;
                await db.query(registerQuery);
                res.status(200).json({ msg: "User registered successfully" });
            }
        }
    } catch (err) {
        console.error('Database error:', err); // Log database error
        res.status(500).json({ errMsg: `Server Error: ${err.message}` });
    }
});


app.post("/admin-login/",async(req,res)=>{
    const { adminname, password } = req.body;
   

      const getQuery = `SELECT * FROM admin WHERE admin_name='${adminname}'`;
        // Execute query to get user from database
      console.log(adminname)  
        
    try{
        const [result,fields] = await db.query(getQuery)
        

        if (result.length===0) {
            res.status(400).send({errMsg:"Invalid Admin"});
        } else {
            // Check password 
              const checkPassword= await bcrypt.compare(password,result[0].admin_password)
              if (checkPassword===true){

                const payload={adminname:adminname}
                const jwtToken=jwt.sign(payload,"MY_SECRET_ADMIN_TOKEN")
                res.send({jwtToken})
                console.log(jwtToken)

              }else{
                res.status(400).send({errMsg:"Invalid Admin and Password"});
              }

            }
        
        }
    catch(err){
        res.status(500).send({errMsg:`Server Error : ${err}`})
    }

})

app.get("/admin",Authorization,async(req,res)=>{

   try{

    const { search_q = "" } = req.query;

    const [AllMovies,AllMovieField]=await db.query(`SELECT * FROM movie WHERE name LIKE '%${search_q}%'`)
    console.log(AllMovies)
    res.send({AllMovies:AllMovies})}

    catch(err){
        res.status(500).send({errMsg:`Server Error : ${err}`})
    }
})


  
app.post(
    '/admin/upload',
    Authorization,
    upload.fields([
      { name: 'movieImage', maxCount: 1 },
      { name: 'movieTrailer', maxCount: 1 },
      { name: 'PosterUrl', maxCount: 1 },
      { name: 'DirectorImage', maxCount: 10 },
      { name: 'StarImage', maxCount: 15 },
      { name: 'MusicDirectorImage', maxCount: 10 },
      { name: 'Video', maxCount: 10 },
      { name: 'Thumbnail', maxCount: 10 },
      { name: 'OTTplatformImage', maxCount: 10 },
    ]),
    async (req, res) => {
      try {
        // Accessing files from req.files
        const movieImage = req.files['movieImage'] ? req.files['movieImage'][0] : null;
        const movieTrailer = req.files['movieTrailer'] ? req.files['movieTrailer'][0] : null;
        const PosterUrl = req.files['PosterUrl'] ? req.files['PosterUrl'][0] : null;
        const DirectorImage = req.files['DirectorImage'] ? req.files['DirectorImage'] : [];
        const MusicDirectorImage = req.files['MusicDirectorImage'] ? req.files['MusicDirectorImage'] : [];
        const StarImage = req.files['StarImage'] ? req.files['StarImage'] : [];
        const OTTplatformImage = req.files['OTTplatformImage'] ? req.files['OTTplatformImage'] : [];
        const Video = req.files['Video'] ? req.files['Video'] : [];
        const Thumbnail = req.files['Thumbnail'] ? req.files['Thumbnail'] : [];
  
        // Parsing JSON arrays from request body
        const Directors = req.body.directors ? JSON.parse(req.body.directors) : [];
        const MusicDirectors = req.body.musicDirectors ? JSON.parse(req.body.musicDirectors) : [];
        const Stars = req.body.stars ? JSON.parse(req.body.stars) : [];
        const Writer = req.body.writer ? JSON.parse(req.body.writer) : [];
        const Genre = req.body.genre ? JSON.parse(req.body.genre) : [];
        const Language = req.body.language ? JSON.parse(req.body.language) : [];
        const OTTPlatform = req.body.OTTPlatform ? JSON.parse(req.body.OTTPlatform) : [];
        const RelatedVideo = req.body.relatedVideo ? JSON.parse(req.body.relatedVideo) : [];
  
        const { name, description, runtime, certificate, category, releaseDate, imdbRating } = req.body;

        // Insert movie record and get the last inserted ID
        const movieSql = "INSERT INTO movie(name, image_url, video_url, poster_url, runtime, release_date, description, imdb_rating, category, certificate) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
const movieValues = [name, movieImage.path, movieTrailer.path, PosterUrl.path, runtime, releaseDate, description, imdbRating, category, certificate];
        const movieResult = await db.query(movieSql, movieValues);

        const [movieIDResult,fields] = await db.query(`SELECT * FROM movie WHERE name = '${name}'`);
        const MovieId=movieIDResult[0].movie_id
        
    
        // Insert Directors
        await Promise.all(Directors.map((dir, index) => {
            if (DirectorImage[index]) {
              const dirSql = "INSERT INTO director (movie_id, director_name, director_img_url) VALUES (?, ?, ?)";
              const dirValues = [MovieId, dir.name, DirectorImage[index].path];
              return db.query(dirSql, dirValues);
            }
          }));
      
          // Insert Music Directors
          await Promise.all(MusicDirectors.map((musicDir, index) => {
            if (MusicDirectorImage[index]) {
              const musicDirSql = "INSERT INTO music_director (movie_id, music_dir_name, music_dir_img_url) VALUES (?, ?, ?)";
              const musicDirValues = [MovieId, musicDir.name, MusicDirectorImage[index].path];
              return db.query(musicDirSql, musicDirValues);
            }
          }));

           // Insert Stars
    await Promise.all(Stars.map((star, index) => {
        if (StarImage[index]) {
          const starSql = "INSERT INTO stars (movie_id, star_name, star_img_url) VALUES (?, ?, ?)";
          const starValues = [MovieId, star.name, StarImage[index].path];
          return db.query(starSql, starValues);
        }
      }));
  
      // Insert OTT Platforms
      await Promise.all(OTTPlatform.map((OTT, index) => {
        if (OTTplatformImage[index]) {
          const OTTSql = "INSERT INTO ott_platform (movie_id, ott_url, ott_img_url) VALUES (?, ?, ?)";
          const OTTValues = [MovieId, OTT.link, OTTplatformImage[index].path];
          return db.query(OTTSql, OTTValues);
        }
      }));

      // Insert Related Videos
    await Promise.all(RelatedVideo.map((RelVideo, index) => {
        if (Video[index] && Thumbnail[index]) {
          const relVideoSql = "INSERT INTO related_video (movie_id, video_name, video_url, video_url_img) VALUES (?, ?, ?, ?)";
          const relVideoValues = [MovieId, RelVideo.title, Video[index].path, Thumbnail[index].path];
          return db.query(relVideoSql, relVideoValues);
        }
      }));
  
      // Insert Writers
      await Promise.all(Writer.map((writer) => {
        const writerSql = "INSERT INTO writter (movie_id, writter_name) VALUES (?, ?)";
        const writerValues = [MovieId, writer.name];
        return db.query(writerSql, writerValues);
      }));

      await Promise.all(Genre.map((genre) => {
        const genreSql = "INSERT INTO genre (movie_id, type) VALUES (?, ?)";
        const genreValues = [MovieId, genre.type];
        return db.query(genreSql, genreValues);
      }));
  
      // Insert Languages
      await Promise.all(Language.map((lan) => {
        const lanSql = "INSERT INTO language (movie_id, language, category) VALUES (?, ?, ?)";
        const lanValues = [MovieId, lan.language, lan.category];
        return db.query(lanSql, lanValues);
      }));

        // Store data in the database
        // You should add the logic to store the data in the database here
        
      res.status(200).json({
        message: 'Files uploaded successfully',
        movieImage,
        movieTrailer,
        PosterUrl,
        DirectorImage,
        MusicDirectorImage,
        StarImage,
        OTTplatformImage,
        Video,
        Thumbnail,
      }); 
      console.log('Request body:', req.body);
        
        console.log('Request body:', JSON.stringify(req.body, null, 2));
  
      } catch (err) {
        console.error('Error:', err);
        res.status(500).json({ message: `Error: ${err.message}` });
      }
    }
  );

app.delete('/admin/delete/:id',Authorization,async(req,res)=>{
  const {id}=req.params

  
  const queries = [
    'DELETE FROM director WHERE movie_id = ?',
    'DELETE FROM music_director WHERE movie_id = ?',
    'DELETE FROM stars WHERE movie_id = ?',
    'DELETE FROM ott_platform WHERE movie_id = ?',
    'DELETE FROM related_video WHERE movie_id = ?',
    'DELETE FROM genre WHERE movie_id = ?',
    'DELETE FROM language WHERE movie_id = ?',
    'DELETE FROM writter WHERE movie_id = ?',
    'DELETE FROM likes WHERE movie_id = ?',

    'DELETE FROM watch_list WHERE movie_id = ?',

    'DELETE FROM movie WHERE movie_id = ?'
  ];

  try {
    for (const query of queries) {
      await db.query(query, [id]);
      console.log(query)
    }
    
  } catch (error) {
    res.status(500).send('Error deleting movie and related data: ' + error.message);

  }
})