//

if (response.ok){
      console.log(data.allmovies)
      const updatedMovies=data.allmovies.map(eachMovie=>({
        movieId:eachMovie.movie_id,
        imageUrl:eachMovie.image_url,
        videoUrl:eachMovie.video_url,
        language:eachMovie.language,
        genre:eachMovie.genre,
        category:eachMovie.category,
        year:eachMovie.year,
        isLiked:eachMovie.liked!==0 ?  true:false,
        totalLikes:eachMovie.total_likes,
        imdbRating:eachMovie.imdb_rating,
        description:eachMovie.description,
        name:eachMovie.name,
      }))



{
       isOpen &&  <div className="lg:hidden flex flex-col justify-start mr-auto p-5 w-full bg-gray-800">
       <div className='w-80 mx-auto my-2 '>
        {isSearch ? <Link to="/search" className="relative flex items-center w-full h-11 rounded-lg focus-within:shadow-lg bg-white overflow-hidden">
          <div className="grid place-items-center h-full w-12 text-gray-300">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
          </div>
          <input onChange={handleSearchChange}
            className="peer h-full w-full outline-none text-sm text-gray-700 pr-2"
            type="text"
            id="search"
            placeholder="Search something.." />
        </Link>: <div className="relative flex items-center w-full h-11 rounded-lg focus-within:shadow-lg bg-white overflow-hidden">
          <div className="grid place-items-center h-full w-12 text-gray-300">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
          </div>
          <input onChange={handleSearchChange}
            className="peer h-full w-full outline-none text-sm text-gray-700 pr-2"
            type="text"
            id="search"
            placeholder="Search something.." />
        </div>}
      </div>
       <Link to="/" className="text-lg font-mono hover:text-sky-500 text-white ">Home</Link>
       <Link to="/popular" className="text-lg font-mono hover:text-sky-400 text-white ">Popular</Link>
       <Link to="/profile" className="text-lg font-mono text-white hover:text-sky-500 ">Profile</Link>
     </div>
      }

      const debounce = (func, delay) => {
  let timeoutId;
  console.log(timeoutId)
  return (...args) => {
    clearTimeout(timeoutId);
    timeoutId = setTimeout(() => {
      func(...args);
    }, delay);
  };
};


const onWheelSlider=debounce((e,ref)=>{
  if (!ref.current) return
  if (e.deltaX >0){
    ref.current.slickNext();

  }else if (e.deltaX<0){
    ref.current.slickPrev();
  }
},20)


    <button type="button" className='' onClick={() => this.isLikedMovie()}>
                {!this.state.like ?<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-8 h-8 text-white text-right">
  <path strokeLinecap="round" strokeLinejoin="round" d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z" />
</svg>: <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-8 h-8 text-rose-500 transition duration-300 delay-75">
  <path d="m11.645 20.91-.007-.003-.022-.012a15.247 15.247 0 0 1-.383-.218 25.18 25.18 0 0 1-4.244-3.17C4.688 15.36 2.25 12.174 2.25 8.25 2.25 5.322 4.714 3 7.688 3A5.5 5.5 0 0 1 12 5.052 5.5 5.5 0 0 1 16.313 3c2.973 0 5.437 2.322 5.437 5.25 0 3.925-2.438 7.111-4.739 9.256a25.175 25.175 0 0 1-4.244 3.17 15.247 15.247 0 0 1-.383.219l-.022.012-.007.004-.003.001a.752.752 0 0 1-.704 0l-.003-.001Z" />
</svg> 

}</button>


        <div className='' style={{ 
   backgroundImage: `linear-gradient(rgba(15, 23, 42, 0.90), rgba(15, 23, 42, 1)), url(${posterUrl})`, 
  position:"absolute",
  height: '100vh', 
  minWidth: '100%',
  backgroundSize: 'cover',
  opacity:'50px',
}}>
  <Header/>
  <div className='absolute mt-28 mx-10 flex flex-row '>
  <div className='relative '>
  <Shadow input={<img
    src={imageUrl}
    alt={name}
    style={{ height: '500px', width: '350px' }}
    className=' relative rounded-xl bg-cover'
  />}/>
  <div className="absolute bottom-0 right-0 flex justify-end">
    <CircilarRating rating={imdbRating} />
  </div>
</div>


    <div className='ml-24 w-2/3 divide-y-2'>
      <h1 className="text-8xl font-MontserBarlowCondensed font-medium text-white">{name}</h1>
      <div className='flex flex-row divide-x-4 gap-10 py-4 mb-4'>
      <div className='-mr-5  pb-4'>
        <h1 className='text-white stroke-2 stroke-gray-400 text-2xl font-sans py-3'>Runtime</h1>
       <Runtime hours={hours} minutes={minutes}/>
      </div>
      <div className='pl-5 pb-4'>
      <h1 className='text-white stroke-2 stroke-gray-400 text-2xl font-sans py-3'>Release Date</h1>
      <ReleaseDate input={releaseDate}/>

      </div> 
      </div>
      <div>
      <h1 className='text-white stroke-2 stroke-gray-400 text-2xl font-sans py-3' >Storyline</h1>
        <p className='text-white stroke-2 stroke-gray-400 text-2xl font-sans py-3'>{description}</p>
      </div>
    </div>

  </div>
</div>